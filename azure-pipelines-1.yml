# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go
# SET UP GO
trigger:
- main-test

pool:
  vmImage: 'ubuntu-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.19.3' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- task: GoTool@0
  inputs:
    version: '1.19.3'
- script: |
    go version
# - task: Go@0
#   inputs:
#     command: 'get'
#     arguments: '-d'
#     workingDirectory: '$(System.DefaultWorkingDirectory)'
#   # BUILD
# - task: Go@0
#   inputs:
#     command: 'build'
#     workingDirectory: '$(System.DefaultWorkingDirectory)'
# - task: Go@0
#   inputs:
#     command: 'build'
#     workingDirectory: '$(System.DefaultWorkingDirectory)'
# - script: |
#     mkdir -p '$(GOBIN)'
#     mkdir -p '$(GOPATH)/pkg'
#     mkdir -p '$(modulePath)'
#     shopt -s extglob
#     shopt -s dotglob
#     mv !(gopath) '$(modulePath)'
#     echo '##vso[task.prependpath]$(GOBIN)'
#     echo '##vso[task.prependpath]$(GOROOT)/bin'
#   displayName: 'Set up the Go workspace'

# - script: |
#     go version
#     go get -v -t -d ./...
#     if [ -f Gopkg.toml ]; then
#         curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#         dep ensure
#     fi
#     go build -v .
#   workingDirectory: '$(modulePath)'
#   displayName: 'Get dependencies, then build'
#   # TEST
# - task: Go@0
#   inputs:
#     command: 'test'
#     arguments: '-v'
#     workingDirectory: '$(modulePath)'
- script: |
    go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
  displayName: 'Install Nuclei'
- script: |
    nuclei -u https://example.com
  displayName: 'Run Nuclei'
- task: CopyFiles@2
  inputs:
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
     artifactName: drop